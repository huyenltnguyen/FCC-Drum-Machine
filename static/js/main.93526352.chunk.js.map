{"version":3,"sources":["DrumPad.tsx","constants.ts","DrumMachine.tsx","App.tsx","index.tsx"],"names":["React","forwardRef","audioRef","id","audio","className","onMouseDown","onMouseUp","cls","role","tabIndex","console","log","src","ref","hotKeys","keyQ","keyW","keyE","keyA","keyS","keyD","keyZ","keyX","keyC","drumPads","DrumMachine","divRef","useRef","audioRefs","useState","selectedPad","setSelectedPad","setPad","padId","unsetPad","setTimeout","playSound","refIndex","findIndex","item","current","play","onKeyUp","useEffect","focus","onKeyDown","event","key","toUpperCase","Object","values","includes","map","index","el","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAmCeA,G,MAAAA,IAAMC,YAxBL,SAAC,EAEfC,GACI,IAFFC,EAEC,EAFDA,GAAIC,EAEH,EAFGA,MAAOC,EAEV,EAFUA,UAAWC,EAErB,EAFqBA,YAAaC,EAElC,EAFkCA,UAG/BC,EAAG,mBAAeH,GAExB,OACE,yBACEA,UAAWG,EACXC,KAAK,SACLN,GAAIA,EACJO,SAAU,EACVH,UAAWA,EACXD,YAAa,WACXA,EAAYH,GACZQ,QAAQC,IAAIT,KAGd,8BAAOA,GACP,2BAAOE,UAAU,OAAOF,GAAIA,EAAIU,IAAKT,EAAOU,IAAKZ,SC9B1Ca,EAAU,CACrBC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,KAGKC,EAAW,CACtB,CACEtB,GAAIY,EAAQC,KACZZ,MACE,4FAEJ,CACED,GAAIY,EAAQE,KACZb,MACE,6FAEJ,CACED,GAAIY,EAAQG,KACZd,MACE,kGAEJ,CACED,GAAIY,EAAQI,KACZf,MACE,4FAEJ,CACED,GAAIY,EAAQK,KACZhB,MACE,4FAEJ,CACED,GAAIY,EAAQM,KACZjB,MACE,6FAEJ,CACED,GAAIY,EAAQO,KACZlB,MACE,4FAEJ,CACED,GAAIY,EAAQQ,KACZnB,MACE,0FAEJ,CACED,GAAIY,EAAQS,KACZpB,MACE,0FCkBSsB,G,MAnEK,WAClB,IAAMC,EAASC,iBAAuB,MAChCC,EAAYD,iBAAoC,IAF9B,EAGcE,mBAAwB,MAHtC,mBAGjBC,EAHiB,KAGJC,EAHI,KAKlBC,EAAS,SAACC,GAAD,OAAmBF,EAAeE,IAE3CC,EAAW,kBAAMC,YAAW,kBAAMJ,EAAe,QAAO,MAExDK,EAAY,SAACH,GAEjB,IAAMI,EAAWb,EAASc,WAAU,SAACC,GAAD,OAAUA,EAAKrC,KAAO+B,KAG1DL,EAAUY,QAAQH,IAAaT,EAAUY,QAAQH,GAAUI,QAGvDpC,EAAc,SAAC4B,GACnBD,EAAOC,GACPG,EAAUH,IAGN3B,EAAY4B,EAWZQ,EAAUR,EAoBhB,OAJAS,qBAAU,WACRjB,EAAOc,SAAWd,EAAOc,QAAQI,UAChC,IAGD,yBACE1C,GAAG,eACHO,SAAU,EACVI,IAAKa,EACLmB,UAlCc,SAACC,GACjB,IAAMC,EAAMD,EAAMC,IAAIC,cAEjBC,OAAOC,OAAOpC,GAASqC,SAASJ,KAErCf,EAAOe,GACPX,EAAUW,KA6BRL,QAASA,GAET,yBAAKxC,GAAG,WAAW4B,GACnB,yBAAK1B,UAAU,aA1BjBoB,EAAS4B,KAAI,SAACb,EAAMc,GAAP,OACX,kBAAC,EAAD,CACEN,IAAKR,EAAKrC,GACVA,GAAIqC,EAAKrC,GACTC,MAAOoC,EAAKpC,MACZC,UAAW0B,IAAgBS,EAAKrC,GAAK,WAAa,GAClDG,YAAaA,EACbC,UAAWA,EACXO,IAAK,SAACyC,GAAD,OAAS1B,EAAUY,QAAQa,GAASC,YCvClCC,MARf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,QCFNoD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.93526352.chunk.js","sourcesContent":["import React, { RefObject } from \"react\";\nimport \"./DrumPad.css\";\n\ninterface Props {\n  id: string;\n  audio: string;\n  className: string;\n  onMouseDown: (id: string) => void;\n  onMouseUp: () => void;\n}\n\nconst DrumPad = (\n  { id, audio, className, onMouseDown, onMouseUp }: Props,\n  audioRef: RefObject<HTMLAudioElement>\n) => {\n  const cls = `drum-pad ${className}`;\n\n  return (\n    <div\n      className={cls}\n      role=\"button\"\n      id={id}\n      tabIndex={0}\n      onMouseUp={onMouseUp}\n      onMouseDown={() => {\n        onMouseDown(id);\n        console.log(id);\n      }}\n    >\n      <span>{id}</span>\n      <audio className=\"clip\" id={id} src={audio} ref={audioRef} />\n    </div>\n  );\n};\n\nexport default React.forwardRef(DrumPad);\n","export const hotKeys = {\n  keyQ: \"Q\",\n  keyW: \"W\",\n  keyE: \"E\",\n  keyA: \"A\",\n  keyS: \"S\",\n  keyD: \"D\",\n  keyZ: \"Z\",\n  keyX: \"X\",\n  keyC: \"C\",\n};\n\nexport const drumPads = [\n  {\n    id: hotKeys.keyQ,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/bubbles.mp3\",\n  },\n  {\n    id: hotKeys.keyW,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/confetti.mp3\",\n  },\n  {\n    id: hotKeys.keyE,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/dotted-spiral.mp3\",\n  },\n  {\n    id: hotKeys.keyA,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/flash-2.mp3\",\n  },\n  {\n    id: hotKeys.keyS,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/glimmer.mp3\",\n  },\n  {\n    id: hotKeys.keyD,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/piston-1.mp3\",\n  },\n  {\n    id: hotKeys.keyZ,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/prism-1.mp3\",\n  },\n  {\n    id: hotKeys.keyX,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/timer.mp3\",\n  },\n  {\n    id: hotKeys.keyC,\n    audio:\n      \"https://raw.githubusercontent.com/jonobr1/Neuronal-Synchrony/master/assets/B/wipe.mp3\",\n  },\n];\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport DrumPad from \"./DrumPad\";\nimport { hotKeys, drumPads } from \"./constants\";\n\nimport \"./DrumMachine.css\";\n\nconst DrumMachine = () => {\n  const divRef = useRef<HTMLDivElement>(null);\n  const audioRefs = useRef<(HTMLAudioElement | null)[]>([]);\n  const [selectedPad, setSelectedPad] = useState<string | null>(null);\n\n  const setPad = (padId: string) => setSelectedPad(padId);\n\n  const unsetPad = () => setTimeout(() => setSelectedPad(null), 200);\n\n  const playSound = (padId: string) => {\n    // Use the padId to find the index of the ref in the ref array\n    const refIndex = drumPads.findIndex((item) => item.id === padId);\n\n    // Play the corresponding audio\n    audioRefs.current[refIndex] && audioRefs.current[refIndex].play();\n  };\n\n  const onMouseDown = (padId: string) => {\n    setPad(padId);\n    playSound(padId);\n  };\n\n  const onMouseUp = unsetPad;\n\n  const onKeyDown = (event: React.KeyboardEvent) => {\n    const key = event.key.toUpperCase();\n\n    if (!Object.values(hotKeys).includes(key)) return;\n\n    setPad(key);\n    playSound(key);\n  };\n\n  const onKeyUp = unsetPad;\n\n  const renderDrumPads = () =>\n    drumPads.map((item, index) => (\n      <DrumPad\n        key={item.id}\n        id={item.id}\n        audio={item.audio}\n        className={selectedPad === item.id ? \"selected\" : \"\"}\n        onMouseDown={onMouseDown}\n        onMouseUp={onMouseUp}\n        ref={(el) => (audioRefs.current[index] = el)}\n      />\n    ));\n\n  // Autofocus on the wrapper div on component mount\n  useEffect(() => {\n    divRef.current && divRef.current.focus();\n  }, []);\n\n  return (\n    <div\n      id=\"drum-machine\"\n      tabIndex={0}\n      ref={divRef}\n      onKeyDown={onKeyDown}\n      onKeyUp={onKeyUp}\n    >\n      <div id=\"display\">{selectedPad}</div>\n      <div className=\"drum-pads\">{renderDrumPads()}</div>\n    </div>\n  );\n};\n\nexport default DrumMachine;\n","import React from 'react';\nimport './App.css';\nimport DrumMachine from './DrumMachine'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}